package fr.eni.suividesrepas.dal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import fr.eni.suividesrepas.bo.Aliment;
import fr.eni.suividesrepas.bo.Repas;

public class RepasDAOJdbcImpl implements RepasDAO{
	
	private static final String SQL_INSERT_REPAS="INSERT INTO REPAS(date_repas, heure_repas) values(?,?)";
	private static final String SQL_INSERT_ALIMENT="INSERT INTO ALIMENTS(nom, id_repas) values(?,?)";
	private static final String SQL_SELECT_ALL_REPAS="SELECT * FROM REPAS";
	private static final String SQL_SELECT_ALL_ALIMENT_FROM_REPAS="SELECT * FROM ALIMENTS WHERE id_repas = ?";
	
	public RepasDAOJdbcImpl() {

	}
	
	// method to insert a "repas" and his "aliments"
	public void insert(Repas repas){
		
		try {
			Connection connection = DataBaseConnection.getConnection();
			try {
				// disable autocommit for multiple saves in database (repas and aliments)
				connection.setAutoCommit(false);
				// create a new Statement for the insertion of "repas"
				PreparedStatement statement = connection.prepareStatement(SQL_INSERT_REPAS, PreparedStatement.RETURN_GENERATED_KEYS);
				statement.setDate(1, java.sql.Date.valueOf(repas.getDate()));
				statement.setTime(2, java.sql.Time.valueOf(repas.getHeure()));
				statement.executeUpdate();
				ResultSet resultSet = statement.getGeneratedKeys();
				// set the id to the "repas" generated by database
				if(resultSet.next())
				{
					repas.setId(resultSet.getInt(1));
				}
				// close the result set and statement, to create new ones 
				resultSet.close();
				statement.close();
				
				// redefines the statement for the insertion of "aliments"
				statement = connection.prepareStatement(SQL_INSERT_ALIMENT, PreparedStatement.RETURN_GENERATED_KEYS);
				// for each aliments
				for (Aliment aliment : repas.getListeAliments()) {
					// redefines the statement for the insertion of each "aliments"
					statement = connection.prepareStatement(SQL_INSERT_ALIMENT, PreparedStatement.RETURN_GENERATED_KEYS);
					statement.setString(1, aliment.getNom());
					statement.setInt(2, repas.getId());
					statement.executeUpdate();
					resultSet = statement.getGeneratedKeys();
					if(resultSet.next())
					{
						aliment.setId(resultSet.getInt(1));
					}
					resultSet.close();
					statement.close();
				}
				connection.commit();
				connection.close();
				
			} catch (Exception e) {
				// catch exceptions from insertion in database
				e.printStackTrace();
				// Undo all changes made in the current transaction and releases any database locks currently held by this Connection object
				connection.rollback();
			}
			
		} catch (SQLException e) {
			// catch exceptions from database connection
			e.printStackTrace();

		}
	}
	
	// method to list all "repas" 
	public List<Repas> getAllRepas() {
		List<Repas> listeRepas = new ArrayList<Repas>();
		try {
			Connection connection = DataBaseConnection.getConnection();
			// create simple statement and get the response result set 
			Statement statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(SQL_SELECT_ALL_REPAS);
			Repas repas=new Repas();
			// for each result in set
			while(resultSet.next())
			{
				repas = getRepasInResultSet(resultSet);
				PreparedStatement pstatement = connection.prepareStatement(SQL_SELECT_ALL_ALIMENT_FROM_REPAS);
				pstatement.setInt(1, repas.getId());
				ResultSet alimentList = pstatement.executeQuery();
				while (alimentList.next()) {
					repas.getListeAliments().add(getAlimentInResultSet(alimentList));
				}
				listeRepas.add(repas);
			}
			
		} catch (SQLException e) {
			// catch exceptions from database connection
			e.printStackTrace();
		}
		
		return listeRepas;
		
	}	
	
	private Aliment getAlimentInResultSet(ResultSet resultSet) throws SQLException {
		// build aliment with 
		Aliment aliment = new Aliment(resultSet.getInt("id"), resultSet.getString("nom"));
		return aliment;
	}
	
	private Repas getRepasInResultSet(ResultSet rs) throws SQLException {
		Repas repasCourant;
		repasCourant=new Repas();
		repasCourant.setId(rs.getInt("id"));
		repasCourant.setDate(rs.getDate("date_repas").toLocalDate());
		repasCourant.setHeure(rs.getTime("heure_repas").toLocalTime());
		return repasCourant;
	}
}

